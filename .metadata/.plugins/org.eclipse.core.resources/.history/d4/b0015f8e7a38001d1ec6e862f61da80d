package com.restspringboot;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.restspringboot.exceptions.UnsupportedMathException;

@RestController
public class MathController {
//	private static final String template = "Hello, %s!";
//	private final AtomicLong counter = new AtomicLong();

	@GetMapping("/sum/{firstNumber}/{secondNumber}")
	public Double sum(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!isNumeric(firstNumber) || !isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return convertDouble(firstNumber) + convertDouble(secondNumber);
	}

	@GetMapping("/sub/{firstNumber}/{secondNumber}")
	public Double sub(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!isNumeric(firstNumber) || !isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return convertDouble(firstNumber) - convertDouble(secondNumber);
	}

	@GetMapping("/div/{firstNumber}/{secondNumber}")
	public Double div(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!isNumeric(firstNumber) || !isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return convertDouble(firstNumber) / convertDouble(secondNumber);
	}
	
	@GetMapping("/mult/{firstNumber}/{secondNumber}")
	public Double mult(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!isNumeric(firstNumber) || !isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return convertDouble(firstNumber) * convertDouble(secondNumber);
	}

	private Double convertDouble(String number) {
		if (number == null)
			throw new RuntimeException();
		;
		String strNumber = number.replaceAll(",", ".");
		if (isNumeric(strNumber))
			return Double.parseDouble(strNumber);
		return 0d;
	}

	private boolean isNumeric(String number) {
		if (number == null)
			throw new RuntimeException();
		;
		String strNumber = number.replaceAll(",", ".");
		return strNumber.matches("[-+]?[0-9]*\\.?[0-9]+");
	}
}
