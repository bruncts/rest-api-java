package com.restspringboot;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.restspringboot.converters.NumberConverter;
import com.restspringboot.exceptions.UnsupportedMathException;

@RestController
public class MathController {
//	private static final String template = "Hello, %s!";
//	private final AtomicLong counter = new AtomicLong();

	@GetMapping("/sum/{firstNumber}/{secondNumber}")
	public Double sum(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!NumberConverter.isNumeric(firstNumber) || !NumberConverter.isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return NumberConverter.convertDouble(firstNumber) + NumberConverter.convertDouble(secondNumber);
	}

	@GetMapping("/sub/{firstNumber}/{secondNumber}")
	public Double sub(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!NumberConverter.isNumeric(firstNumber) || !NumberConverter.isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return NumberConverter.convertDouble(firstNumber) - NumberConverter.convertDouble(secondNumber);
	}

	@GetMapping("/div/{firstNumber}/{secondNumber}")
	public Double div(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!NumberConverter.isNumeric(firstNumber) || !NumberConverter.isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return NumberConverter.convertDouble(firstNumber) / NumberConverter.convertDouble(secondNumber);
	}
	
	@GetMapping("/mult/{firstNumber}/{secondNumber}")
	public Double mult(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!NumberConverter.isNumeric(firstNumber) || !NumberConverter.isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return NumberConverter.convertDouble(firstNumber) * NumberConverter.convertDouble(secondNumber);
	}
	
	@GetMapping("/mean/{firstNumber}/{secondNumber}")
	public Double mean(@PathVariable(value = "firstNumber") String firstNumber,
			@PathVariable(value = "secondNumber") String secondNumber) {
		if (!NumberConverter.isNumeric(firstNumber) || !NumberConverter.isNumeric(secondNumber)) {
			throw new UnsupportedMathException("Only numeric values accepted");
		}
		return (NumberConverter.convertDouble(firstNumber) + NumberConverter.convertDouble(secondNumber))/2;
	}
	
	@GetMapping("/sqrt/{firstNumber}")
	public Double mean(@PathVariable(value = "firstNumber") String firstNumber) {
		if (!NumberConverter.isNumeric(firstNumber)) {
			throw new UnsupportedMathException("Only numeric value accepted");
		}
		return Math.sqrt(NumberConverter.convertDouble(firstNumber));
	}
	
	
}
